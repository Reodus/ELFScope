name: CMake Build, Test, and Release

on:
  push:
    branches: [ "master" ]
    tags:
      - "v*"  # Trigger the release workflow on tags prefixed with 'v'

  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        build_type: [Release]
        cpp_compiler: [g++]

    steps:
      - uses: actions/checkout@v4

      - name: Install CMake
        run: sudo apt-get install -y cmake

      - name: Set reusable strings
        id: vars
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

      - name: Configure CMake
        run: |
          cmake -B ${{ steps.vars.outputs.build-output-dir }} \
                -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} \
                -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
                -S ${{ github.workspace }}

      - name: Build
        run: cmake --build ${{ steps.vars.outputs.build-output-dir }} --config ${{ matrix.build_type }}

      - name: Run Tests
        working-directory: ${{ steps.vars.outputs.build-output-dir }}
        run: ctest --output-on-failure --build-config ${{ matrix.build_type }}

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ELFScope-${{ matrix.build_type }}-build
          path: ${{ steps.vars.outputs.build-output-dir }}

  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v') && github.repository_owner == 'reodus'

    steps:
      - uses: actions/checkout@v4

      - name: Set reusable strings
        id: vars
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

      - name: Configure CMake (Release only)
        run: |
          cmake -B ${{ steps.vars.outputs.build-output-dir }} \
                -DCMAKE_CXX_COMPILER=g++ \
                -DCMAKE_BUILD_TYPE=Release \
                -S ${{ github.workspace }}

      - name: Build (Release only)
        run: cmake --build ${{ steps.vars.outputs.build-output-dir }} --config Release

      - name: Package Release Build
        run: |
          cd ${{ steps.vars.outputs.build-output-dir }}
          zip -r ELFScope-${{ github.ref_name }}.zip ./*

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: "Release ${{ github.ref_name }}"
          draft: false
          prerelease: false

      - name: Upload Release Package
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.vars.outputs.build-output-dir }}/ELFScope-${{ github.ref_name }}.zip
          asset_name: ELFScope-${{ github.ref_name }}.zip
          asset_content_type: application/zip
